

func mai() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Ошибка загрузки .env файла:", err)
	}

	cfg, err := config.MustLoad()
	if err != nil {
		log.Fatalln(err)
	}

	log := logger.SetupLogger(cfg.Env)
	log.Info(
		"starting application",
		slog.String("env", cfg.Env),
		slog.String("version", "123"),
	)
	log.Debug("debug messages are enabled")

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// init storage: postgre
	pool, err := postgres.NewConn(ctx, cfg)
	if err != nil {
		log.Error("failed to init storage", logger.Err(err))
		os.Exit(1)
	}
	defer pool.Close() // Важно закрыть соединение при завершении

	log.Info("successfully connected to database!")

	// Создание репозитория и кэша
	newOrder := order.NewOrderRepository(pool)
	cache := cache.NewCache()

	// Запуск потребителя Kafka в отдельной горутине
	go consumer.ConsumerKafka(ctx, newOrder, cache)
	log.Info("Kafka consumer started")

	// Ожидание сигналов завершения для graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// Демонстрационная работа с БД и кэшем
	data, err := newOrder.GetById(ctx, "b563feb7b2b84b6test")
	if err != nil {
		log.Error("Get order error", logger.Err(err))
	} else {
		log.Info("Order data retrieved", slog.Any("data", data))
	}

	log.Info("Cache contents", slog.Any("cache", cache))

	// Ожидание сигнала завершения
	sig := <-sigChan
	log.Info("Received signal, shutting down", slog.String("signal", sig.String()))

	// Отмена контекста для остановки потребителя
	cancel()

	// Даем время на завершение операций
	time.Sleep(2 * time.Second)
	log.Info("Application shutdown complete")
	return
	// //Чтение данных с файла JSON

	// jsonData, _ := os.ReadFile(os.Getenv("FILE_PATH"))

	// // Проверка валидности данных
	// orderData, err = valid.ProcessValid(jsonData)

	// if err != nil {
	// 	log.Error("ProcessValid json error", logger.Err(err))
	// }

	// //Создание подключения к БД
	// newOrder := order.NewOrderRepository(pool)

	// //Внесение новых данных в БД
	// err = newOrder.Create(ctx, orderData)

	// if err != nil {
	// 	log.Error("Create new order error", logger.Err(err))
	// }
	// fmt.Printf("\n\n\n")
	// //Получение данных из БД по ID
	// data, err := newOrder.GetById(ctx, "b563feb7b2b84b6test")

	// if err != nil {
	// 	log.Error("Get order error", logger.Err(err))
	// }

	// fmt.Println(data)
}